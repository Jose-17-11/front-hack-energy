---
export interface Props {
  users: Array<{
    idUsuario: number;
    nombre: string;
    apellidoP: string;
    apellidoM: string;
    edad: number;
    pais: string;
    correo: string;
    telefono: string;
  }>;
}

const { users } = Astro.props;
---

<div class="overflow-x-auto w-full max-w-5xl mx-auto mt-3">
  <div class="flex flex-col items-center mb-4">
    <h1 class="text-2xl font-semibold text-center mb-4">
      Administración de Usuarios
    </h1>
    <a href="/addUser" class="bg-pink-500 hover:bg-pink-700 text-white font-semibold px-4 py-2 rounded transition-all duration-300 shadow-md">
      Agregar usuario
    </a>
  </div>
  <table class="min-w-full border mt-1 text-center rounded-2xl">
    <thead class="bg-purple-500">
      <tr>
        <th class="py-2 px-4">Id</th>
        <th class="py-2 px-4">Nombre</th>
        <th class="py-2 px-4">Apellido Paterno</th>
        <th class="py-2 px-4">Apellido Materno</th>
        <th class="py-2 px-4">Edad</th>
        <th class="py-2 px-4">País</th>
        <th class="py-2 px-4">Correo</th>
        <th class="py-2 px-4">Teléfono</th>
        <th class="py-2 px-4">Acciones</th>
      </tr>
    </thead>
    <tbody>
      {users.map((user) => (
        <tr key={user.idUsuario} class="border-b hover:bg-gray-100">
          <td class="py-2 px-4">{user.idUsuario}</td>
          <td class="py-2 px-4">{user.nombre}</td>
          <td class="py-2 px-4">{user.apellidoP}</td>
          <td class="py-2 px-4">{user.apellidoM}</td>
          <td class="py-2 px-4">{user.edad}</td>
          <td class="py-2 px-4">{user.pais}</td>
          <td class="py-2 px-4">{user.correo}</td>
          <td class="py-2 px-4">{user.telefono}</td>
          <td class="flex justify-center py-2 space-x-2">
            <a
              href={`/editUser?id=${user.idUsuario}`}
              class="bg-green-500 hover:bg-green-600 text-white px-2 py-2 rounded-lg font-semibold transition-all duration-300 shadow-md"
            >
              Edit
            </a>
            <button
              class="bg-red-500 hover:bg-red-600 text-white px-2 py-2 rounded-lg font-semibold transition-all duration-300 shadow-md"
              data-delete-id={user.idUsuario}
            >
              Del
            </button>
          </td>
        </tr>
      ))}
    </tbody>
  </table>
  <div id="modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white p-4 rounded-lg shadow-lg w-1/3">
      <h2 id="modal-title" class="text-xl text-purple-600 font-bold mb-4 text-center">Título del Modal</h2>
      <p id="modal-message" class="mb-4 text-center">Mensaje del Modal</p>
    </div>
  </div>  
  <div id="confirm-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white p-4 rounded-lg shadow-lg w-1/3">
      <h2 class="text-xl text-red-600 font-bold mb-4 text-center">Confirmar Eliminación</h2>
      <p class="mb-4 text-center">¿Estás seguro de que quieres eliminar este usuario?</p>
      <div class="flex justify-center space-x-4">
        <button id="confirm-yes" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg">Sí</button>
        <button id="confirm-no" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg">No</button>
      </div>
    </div>
  </div>  
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("modal");
    const modalTitle = document.getElementById("modal-title");
    const modalMessage = document.getElementById("modal-message");
    const modalClose = document.getElementById("modal-close");

    const confirmModal = document.getElementById("confirm-modal");
    const confirmYes = document.getElementById("confirm-yes");
    const confirmNo = document.getElementById("confirm-no");
    let userIdToDelete = null;

    async function deleteUser(idUsuario) {
      try {
        const response = await fetch(`http://localhost:5000/api/deleteUser/${idUsuario}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          showModal("Éxito", "Usuario eliminado correctamente", "success");
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showModal("Error", "Error al eliminar el usuario", "error");
        }
      } catch (error) {
        console.error("Error al realizar la solicitud:", error);
        showModal("Error", "Error al eliminar el usuario", "error");
      }
    }

    document.querySelectorAll("button[data-delete-id]").forEach(button => {
      button.addEventListener("click", () => {
        userIdToDelete = button.getAttribute("data-delete-id");
        confirmModal.classList.remove("hidden");
      });
    });

    confirmYes.addEventListener("click", () => {
      if (userIdToDelete) {
        deleteUser(userIdToDelete);
        confirmModal.classList.add("hidden");
        userIdToDelete = null;
      }
    });

    confirmNo.addEventListener("click", () => {
      confirmModal.classList.add("hidden");
      userIdToDelete = null;
    });

    modalClose.addEventListener("click", () => {
      modal.classList.add("hidden");
    });

    function showModal(title, message, type) {
      modalTitle.textContent = title;
      modalMessage.textContent = message;
      modal.classList.remove("hidden");
    }
  });
</script>
